[gd_scene load_steps=28 format=2]

[ext_resource path="res://data/shaders/wave.shader" type="Shader" id=1]
[ext_resource path="res://sprites/debug/puto.png" type="Texture" id=2]
[ext_resource path="res://data/shaders/outline.shader" type="Shader" id=3]
[ext_resource path="res://data/shaders/flash.shader" type="Shader" id=4]
[ext_resource path="res://data/shaders/mode7.shader" type="Shader" id=5]
[ext_resource path="res://data/shaders/wind.shader" type="Shader" id=6]
[ext_resource path="res://data/shaders/squish.shader" type="Shader" id=7]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

const int EFFECT_TYPE_DREAMY = 0;
const int EFFECT_TYPE_WAVY = 1;
const int EFFECT_TYPE_HEAT_WAVE_HORIZONTAL = 2;
const int EFFECT_TYPE_HEAT_WAVE_VERTICAL = 3;
const int EFFECT_TYPE_FLAG = 4;

uniform bool toScreen;
uniform int effectType : hint_range(0, 4);

uniform float uSpeed;
uniform float uFrequency;
uniform float uWaveAmplitude;

vec2 sineWave(vec2 pt, float time) {
	float x = 0.0;
	float y = 0.0;
	
	if (effectType == EFFECT_TYPE_DREAMY) {
		float offsetX = sin(pt.y * uFrequency + time * uSpeed) * uWaveAmplitude;
		pt.x += offsetX // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving
	}
	else if (effectType == EFFECT_TYPE_WAVY) 
	{
		float offsetY = sin(pt.x * uFrequency + time * uSpeed) * uWaveAmplitude;
		pt.y += offsetY; // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving
	}
	else if (effectType == EFFECT_TYPE_HEAT_WAVE_HORIZONTAL)
	{
		x = sin(pt.x * uFrequency + time * uSpeed) * uWaveAmplitude;
	}
	else if (effectType == EFFECT_TYPE_HEAT_WAVE_VERTICAL)
	{
		y = sin(pt.y * uFrequency + time * uSpeed) * uWaveAmplitude;
	}
	else if (effectType == EFFECT_TYPE_FLAG)
	{
		y = sin(pt.y * uFrequency + 10.0 * pt.x + time * uSpeed) * uWaveAmplitude;
		x = sin(pt.x * uFrequency + 5.0 * pt.y + time * uSpeed) * uWaveAmplitude;
	}
	
	return vec2(pt.x + x, pt.y + y);
}

void fragment() {
	if (toScreen) {
		COLOR = textureLod(SCREEN_TEXTURE, sineWave(UV, TIME), 0.0);
	}
	else {
		COLOR = texture(TEXTURE, sineWave(UV, TIME));
	}
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/toScreen = false
shader_param/effectType = 0
shader_param/uSpeed = 8.0
shader_param/uFrequency = 16.0
shader_param/uWaveAmplitude = 0.1

[sub_resource type="ShaderMaterial" id=3]
shader = ExtResource( 1 )
shader_param/toScreen = null
shader_param/effectType = 1
shader_param/uSpeed = 8.0
shader_param/uFrequency = 16.0
shader_param/uWaveAmplitude = 0.1

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

const int EFFECT_TYPE_DREAMY = 0;
const int EFFECT_TYPE_WAVY = 1;
const int EFFECT_TYPE_HEAT_WAVE_HORIZONTAL = 2;
const int EFFECT_TYPE_HEAT_WAVE_VERTICAL = 3;
const int EFFECT_TYPE_FLAG = 4;

uniform bool toScreen;
uniform int effectType : hint_range(0, 4);

uniform float uSpeed;
uniform float uFrequency;
uniform float uWaveAmplitude;

vec2 sineWave(vec2 pt, float time) {
	float x = 0.0;
	float y = 0.0;
	
	if (effectType == EFFECT_TYPE_DREAMY) {
		float offsetX = sin(pt.y * uFrequency + time * uSpeed) * uWaveAmplitude;
		pt.x += offsetX // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving
	}
	else if (effectType == EFFECT_TYPE_WAVY) 
	{
		float offsetY = sin(pt.x * uFrequency + time * uSpeed) * uWaveAmplitude;
		pt.y += offsetY; // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving
	}
	else if (effectType == EFFECT_TYPE_HEAT_WAVE_HORIZONTAL)
	{
		x = sin(pt.x * uFrequency + time * uSpeed) * uWaveAmplitude;
	}
	else if (effectType == EFFECT_TYPE_HEAT_WAVE_VERTICAL)
	{
		y = sin(pt.y * uFrequency + time * uSpeed) * uWaveAmplitude;
	}
	else if (effectType == EFFECT_TYPE_FLAG)
	{
		y = sin(pt.y * uFrequency + 10.0 * pt.x + time * uSpeed) * uWaveAmplitude;
		x = sin(pt.x * uFrequency + 5.0 * pt.y + time * uSpeed) * uWaveAmplitude;
	}
	
	return vec2(pt.x + x, pt.y + y);
}

void fragment() {
	if (toScreen) {
		COLOR = textureLod(SCREEN_TEXTURE, sineWave(UV, TIME), 0.0);
	}
	else {
		COLOR = texture(TEXTURE, sineWave(UV, TIME));
	}
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/toScreen = null
shader_param/effectType = 2
shader_param/uSpeed = 8.0
shader_param/uFrequency = 16.0
shader_param/uWaveAmplitude = 0.1

[sub_resource type="Shader" id=6]
code = "shader_type canvas_item;

const int EFFECT_TYPE_DREAMY = 0;
const int EFFECT_TYPE_WAVY = 1;
const int EFFECT_TYPE_HEAT_WAVE_HORIZONTAL = 2;
const int EFFECT_TYPE_HEAT_WAVE_VERTICAL = 3;
const int EFFECT_TYPE_FLAG = 4;

uniform bool toScreen;
uniform int effectType : hint_range(0, 4);

uniform float uSpeed;
uniform float uFrequency;
uniform float uWaveAmplitude;

vec2 sineWave(vec2 pt, float time) {
	float x = 0.0;
	float y = 0.0;
	
	if (effectType == EFFECT_TYPE_DREAMY) {
		float offsetX = sin(pt.y * uFrequency + time * uSpeed) * uWaveAmplitude;
		pt.x += offsetX // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving
	}
	else if (effectType == EFFECT_TYPE_WAVY) 
	{
		float offsetY = sin(pt.x * uFrequency + time * uSpeed) * uWaveAmplitude;
		pt.y += offsetY; // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving
	}
	else if (effectType == EFFECT_TYPE_HEAT_WAVE_HORIZONTAL)
	{
		x = sin(pt.x * uFrequency + time * uSpeed) * uWaveAmplitude;
	}
	else if (effectType == EFFECT_TYPE_HEAT_WAVE_VERTICAL)
	{
		y = sin(pt.y * uFrequency + time * uSpeed) * uWaveAmplitude;
	}
	else if (effectType == EFFECT_TYPE_FLAG)
	{
		y = sin(pt.y * uFrequency + 10.0 * pt.x + time * uSpeed) * uWaveAmplitude;
		x = sin(pt.x * uFrequency + 5.0 * pt.y + time * uSpeed) * uWaveAmplitude;
	}
	
	return vec2(pt.x + x, pt.y + y);
}

void fragment() {
	if (toScreen) {
		COLOR = textureLod(SCREEN_TEXTURE, sineWave(UV, TIME), 0.0);
	}
	else {
		COLOR = texture(TEXTURE, sineWave(UV, TIME));
	}
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/toScreen = null
shader_param/effectType = 3
shader_param/uSpeed = 8.0
shader_param/uFrequency = 16.0
shader_param/uWaveAmplitude = 0.1

[sub_resource type="Shader" id=8]
code = "shader_type canvas_item;

const int EFFECT_TYPE_DREAMY = 0;
const int EFFECT_TYPE_WAVY = 1;
const int EFFECT_TYPE_HEAT_WAVE_HORIZONTAL = 2;
const int EFFECT_TYPE_HEAT_WAVE_VERTICAL = 3;
const int EFFECT_TYPE_FLAG = 4;

uniform bool toScreen;
uniform int effectType : hint_range(0, 4);

uniform float uSpeed;
uniform float uFrequency;
uniform float uWaveAmplitude;

vec2 sineWave(vec2 pt, float time) {
	float x = 0.0;
	float y = 0.0;
	
	if (effectType == EFFECT_TYPE_DREAMY) {
		float offsetX = sin(pt.y * uFrequency + time * uSpeed) * uWaveAmplitude;
		pt.x += offsetX // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving
	}
	else if (effectType == EFFECT_TYPE_WAVY) 
	{
		float offsetY = sin(pt.x * uFrequency + time * uSpeed) * uWaveAmplitude;
		pt.y += offsetY; // * (pt.y - 1.0); // <- Uncomment to stop bottom part of the screen from moving
	}
	else if (effectType == EFFECT_TYPE_HEAT_WAVE_HORIZONTAL)
	{
		x = sin(pt.x * uFrequency + time * uSpeed) * uWaveAmplitude;
	}
	else if (effectType == EFFECT_TYPE_HEAT_WAVE_VERTICAL)
	{
		y = sin(pt.y * uFrequency + time * uSpeed) * uWaveAmplitude;
	}
	else if (effectType == EFFECT_TYPE_FLAG)
	{
		y = sin(pt.y * uFrequency + 10.0 * pt.x + time * uSpeed) * uWaveAmplitude;
		x = sin(pt.x * uFrequency + 5.0 * pt.y + time * uSpeed) * uWaveAmplitude;
	}
	
	return vec2(pt.x + x, pt.y + y);
}

void fragment() {
	if (toScreen) {
		COLOR = textureLod(SCREEN_TEXTURE, sineWave(UV, TIME), 0.0);
	}
	else {
		COLOR = texture(TEXTURE, sineWave(UV, TIME));
	}
}"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/toScreen = null
shader_param/effectType = 4
shader_param/uSpeed = 8.0
shader_param/uFrequency = 16.0
shader_param/uWaveAmplitude = 0.1

[sub_resource type="ShaderMaterial" id=10]
shader = ExtResource( 3 )
shader_param/stroke = 0.0
shader_param/texSize = Vector2( 96, 124 )
shader_param/outline_color = Color( 1, 1, 1, 0 )

[sub_resource type="Animation" id=11]
resource_name = "Idle"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/stroke")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 3.0, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:material:shader_param/outline_color")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 0.835294, 0.317647, 1 ), Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="ShaderMaterial" id=12]
shader = ExtResource( 4 )
shader_param/flash_color = Color( 1, 1, 1, 1 )
shader_param/flash_modifier = 0.0

[sub_resource type="Animation" id=13]
resource_name = "Idle"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/flash_modifier")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:material:shader_param/flash_color")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5, 1 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 0.960784, 0.513726, 1 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="ShaderMaterial" id=14]
shader = ExtResource( 5 )
shader_param/DEPTH = Vector2( 2, 0 )
shader_param/POSITION = Vector2( -0.5, 0 )
shader_param/REPEAT_X = false
shader_param/REPEAT_Y = false
shader_param/FLIP = false
shader_param/toScreen = false

[sub_resource type="Animation" id=15]
resource_name = "Idle"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/POSITION")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( -0.5, 0 ), Vector2( 0.5, 2 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:material:shader_param/DEPTH")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 2, 0 ), Vector2( 2, 2 ) ]
}

[sub_resource type="ShaderMaterial" id=16]
shader = ExtResource( 6 )
shader_param/horizontal = true
shader_param/vertical = false
shader_param/speed = 1.0
shader_param/minStrength = 1.0
shader_param/maxStrength = 1.0
shader_param/strengthScale = 50.0
shader_param/interval = 2.0
shader_param/detail = 1.0
shader_param/distortion = 0.1
shader_param/heightOffset = 0.0

[sub_resource type="Shader" id=17]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform bool horizontal = true;
uniform bool vertical = false;

uniform float speed = 1.0;
uniform float minStrength : hint_range(0.0, 1.0);
uniform float maxStrength : hint_range(0.0, 1.0);
uniform float strengthScale = 100.0;
uniform float interval = 3.5;
uniform float detail = 1.0;
uniform float distortion : hint_range(0.0, 1.0);
uniform float heightOffset = 0.0;

float getWind(vec2 vertex, vec2 uv, float timer){
	vec2 pos = mix(vec2(1.0), vertex, distortion).xy;
	float time = timer * speed + pos.x * pos.y;
	float diff = pow(maxStrength - minStrength, 2.0);
	float strength = clamp(minStrength + diff + sin(time / interval) * diff, minStrength, maxStrength) * strengthScale;
	float wind = (sin(time) + cos(time * detail)) * strength * max(0.0, (1.0-uv.y) - heightOffset);
	
	return wind;
	}

void vertex() {
	if (horizontal && vertical)
	{
		VERTEX.xy += getWind(VERTEX.xy, UV, TIME);
	}
	if (horizontal && !vertical)
	{
		VERTEX.x += getWind(VERTEX.xy, UV, TIME);
	}
	if (vertical && !horizontal)
	{
		VERTEX.y += getWind(VERTEX.xy, UV, TIME);
	}
}"

[sub_resource type="ShaderMaterial" id=18]
shader = SubResource( 17 )
shader_param/horizontal = false
shader_param/vertical = true
shader_param/speed = 1.0
shader_param/minStrength = 1.0
shader_param/maxStrength = 1.0
shader_param/strengthScale = 50.0
shader_param/interval = 2.0
shader_param/detail = 1.0
shader_param/distortion = 0.1
shader_param/heightOffset = 0.0

[sub_resource type="ShaderMaterial" id=19]
shader = ExtResource( 7 )
shader_param/uv_mode = false
shader_param/x_factor = 2.0
shader_param/bulge = 0.0

[sub_resource type="Animation" id=20]
resource_name = "Idle"
length = 0.8
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:scale")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.2, 0.4, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 1, 1 ), Vector2( 1, 0.8 ), Vector2( 1, 1 ), Vector2( 1, 1.2 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:position")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.2, 0.4, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 608, 320 ), Vector2( 608, 336 ), Vector2( 608, 320 ), Vector2( 608, 312 ) ]
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:material:shader_param/bulge")
tracks/2/interp = 2
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.2, 0.4, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 0.5, 0.0, -0.5 ]
}

[node name="EffectTest" type="CanvasLayer"]
__meta__ = {
"_edit_vertical_guides_": [  ]
}

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( 97, 125 )
texture = ExtResource( 2 )
region_enabled = true
region_rect = Rect2( -24, -16, 150, 164 )

[node name="Sprite2" type="Sprite" parent="."]
material = SubResource( 3 )
position = Vector2( 264.5, 110 )
texture = ExtResource( 2 )
region_enabled = true
region_rect = Rect2( -24, -30, 176, 171 )

[node name="Sprite3" type="Sprite" parent="."]
material = SubResource( 5 )
position = Vector2( 411.5, 111.5 )
texture = ExtResource( 2 )
region_enabled = true
region_rect = Rect2( -24, -30, 176, 171 )

[node name="Sprite4" type="Sprite" parent="."]
material = SubResource( 7 )
position = Vector2( 575.5, 106 )
texture = ExtResource( 2 )
region_enabled = true
region_rect = Rect2( -24, -30, 176, 171 )

[node name="Sprite5" type="Sprite" parent="."]
material = SubResource( 9 )
position = Vector2( 700.5, 122.5 )
texture = ExtResource( 2 )
offset = Vector2( 37, -20.5 )
region_enabled = true
region_rect = Rect2( -24, -30, 176, 171 )

[node name="Sprite6" type="Sprite" parent="."]
material = SubResource( 10 )
position = Vector2( 897, 101.5 )
texture = ExtResource( 2 )
region_enabled = true
region_rect = Rect2( -24, -30, 176, 171 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="Sprite6"]
autoplay = "Idle"
anims/Idle = SubResource( 11 )

[node name="Sprite7" type="Sprite" parent="."]
material = SubResource( 12 )
position = Vector2( 1062.5, 101.5 )
texture = ExtResource( 2 )
region_enabled = true
region_rect = Rect2( -24, -30, 176, 171 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="Sprite7"]
autoplay = "Idle"
anims/Idle = SubResource( 13 )

[node name="Sprite8" type="Sprite" parent="."]
material = SubResource( 14 )
position = Vector2( 1195, 99.5 )
texture = ExtResource( 2 )
region_enabled = true
region_rect = Rect2( -24, -30, 176, 171 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="Sprite8"]
autoplay = "Idle"
anims/Idle = SubResource( 15 )

[node name="Sprite9" type="Sprite" parent="."]
material = SubResource( 16 )
position = Vector2( 85.3171, 331.804 )
texture = ExtResource( 2 )
offset = Vector2( 37, -20.5 )
region_enabled = true
region_rect = Rect2( -24, -30, 176, 171 )

[node name="Sprite10" type="Sprite" parent="."]
material = SubResource( 18 )
position = Vector2( 340.317, 325.804 )
texture = ExtResource( 2 )
offset = Vector2( 37, -20.5 )
region_enabled = true
region_rect = Rect2( -24, -30, 176, 171 )

[node name="Sprite11" type="Sprite" parent="."]
material = SubResource( 19 )
position = Vector2( 608, 320 )
texture = ExtResource( 2 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="Sprite11"]
autoplay = "Idle"
anims/Idle = SubResource( 20 )
